<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Heart Animation</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: linear-gradient(45deg, #0f0c29, #302b63, #24243e);
      font-family: Arial, sans-serif;
    }
    canvas {
      display: block;
    }
    .instructions {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      background: rgba(0,0,0,0.7);
      padding: 15px;
      border-radius: 10px;
      font-size: 14px;
      z-index: 100;
    }
  </style>
</head>
<body>
  <div class="instructions">
    Click/tap to create hearts • Drag to attract hearts • Press spacebar to clear
  </div>
  <canvas id="c"></canvas>

  <script>
    const canvas = document.getElementById("c");
    const ctx = canvas.getContext("2d");

    // Resize canvas
    function resize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener("resize", resize);
    resize();

    // Heart drawing function
    function drawHeart(ctx, x, y, size, opacity = 1) {
      ctx.save();
      ctx.translate(x, y);
      ctx.scale(size, size);
      
      ctx.globalAlpha = opacity;
      ctx.fillStyle = "white";
      ctx.strokeStyle = "rgba(255,255,255,0.8)";
      ctx.lineWidth = 0.1;
      
      ctx.beginPath();
      // Draw heart shape using Bezier curves
      ctx.moveTo(0, 0);
      ctx.bezierCurveTo(-1, -1.5, -2.5, -0.5, -1, 1);
      ctx.bezierCurveTo(0, 2, 1, 1, 0, 0);
      ctx.bezierCurveTo(-1, 1, 0, 2, 1, 1);
      ctx.bezierCurveTo(2.5, -0.5, 1, -1.5, 0, 0);
      
      ctx.fill();
      ctx.stroke();
      ctx.restore();
    }

    // Heart class
    class Heart {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.dx = (Math.random() - 0.5) * 4;
        this.dy = (Math.random() - 0.5) * 4;
        this.size = 5 + Math.random() * 10;
        this.opacity = 1;
        this.rotation = Math.random() * Math.PI * 2;
        this.rotationSpeed = (Math.random() - 0.5) * 0.1;
        this.pulseSpeed = Math.random() * 0.05 + 0.02;
        this.pulseSize = 1;
        this.life = 1; // For fade effects
      }

      update(mouse) {
        // Pulse animation
        this.pulseSize = 1 + Math.sin(Date.now() * this.pulseSpeed) * 0.2;
        
        // Rotation
        this.rotation += this.rotationSpeed;
        
        // Mouse attraction
        if (mouse.x !== null && mouse.y !== null) {
          const dx = mouse.x - this.x;
          const dy = mouse.y - this.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 200 && mouse.down) {
            const force = 0.1;
            this.dx += dx * force / distance;
            this.dy += dy * force / distance;
          }
        }
        
        // Update position with physics
        this.x += this.dx;
        this.y += this.dy;
        
        // Bounce off walls with damping
        if (this.x < 0 || this.x > canvas.width) {
          this.dx = -this.dx * 0.8;
          this.x = Math.max(0, Math.min(this.x, canvas.width));
        }
        if (this.y < 0 || this.y > canvas.height) {
          this.dy = -this.dy * 0.8;
          this.y = Math.max(0, Math.min(this.y, canvas.height));
        }
        
        // Slow down over time
        this.dx *= 0.995;
        this.dy *= 0.995;
      }

      draw() {
        drawHeart(ctx, this.x, this.y, this.size * this.pulseSize, this.opacity * this.life);
      }
      
      isOffscreen() {
        return this.life <= 0;
      }
    }

    // Animation system
    const hearts = [];
    const mouse = { x: null, y: null, down: false };

    // Mouse/touch interactions
    canvas.addEventListener('mousemove', (e) => {
      mouse.x = e.clientX;
      mouse.y = e.clientY;
    });

    canvas.addEventListener('touchmove', (e) => {
      e.preventDefault();
      mouse.x = e.touches[0].clientX;
      mouse.y = e.touches[0].clientY;
    });

    canvas.addEventListener('mousedown', () => mouse.down = true);
    canvas.addEventListener('mouseup', () => mouse.down = false);
    canvas.addEventListener('mouseleave', () => {
      mouse.x = null;
      mouse.y = null;
      mouse.down = false;
    });

    canvas.addEventListener('touchstart', (e) => {
      e.preventDefault();
      mouse.down = true;
      mouse.x = e.touches[0].clientX;
      mouse.y = e.touches[0].clientY;
    });

    canvas.addEventListener('touchend', () => {
      mouse.down = false;
      mouse.x = null;
      mouse.y = null;
    });

    // Click to create hearts
    canvas.addEventListener('click', (e) => {
      for (let i = 0; i < 3; i++) {
        hearts.push(new Heart(e.clientX, e.clientY));
      }
    });

    // Spacebar to clear
    window.addEventListener('keydown', (e) => {
      if (e.code === 'Space') {
        hearts.length = 0;
        e.preventDefault();
      }
    });

    // Auto-generate some hearts
    for (let i = 0; i < 5; i++) {
      hearts.push(new Heart(
        Math.random() * canvas.width,
        Math.random() * canvas.height
      ));
    }

    // Animation loop
    function draw() {
      // Clear with fade effect for trails
      ctx.fillStyle = 'rgba(15, 12, 41, 0.1)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Add subtle background particles
      ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
      for (let i = 0; i < 3; i++) {
        const x = (Date.now() * 0.1 + i * 100) % canvas.width;
        const y = Math.sin(Date.now() * 0.001 + i) * 50 + canvas.height / 2;
        ctx.fillRect(x, y, 2, 2);
      }
      
      // Update and draw hearts
      for (let i = hearts.length - 1; i >= 0; i--) {
        hearts[i].update(mouse);
        hearts[i].draw();
        
        // Remove hearts that are too transparent
        if (hearts[i].isOffscreen()) {
          hearts.splice(i, 1);
        }
      }
      
      // Draw mouse attraction effect
      if (mouse.down && mouse.x !== null) {
        ctx.beginPath();
        ctx.arc(mouse.x, mouse.y, 200, 0, Math.PI * 2);
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
        ctx.lineWidth = 2;
        ctx.stroke();
      }

      requestAnimationFrame(draw);
    }

    draw();
  </script>
</body>
</html>